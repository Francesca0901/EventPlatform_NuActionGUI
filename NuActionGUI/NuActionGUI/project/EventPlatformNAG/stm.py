# Copyright (c) 2023 All Rights Reserved
# Generated code

from security_model import SecurityModel
from model import Action, Constraint
from enum import auto, Enum
import dtm

class FullAccess(SecurityModel):
    @classmethod
    def permit(cls, r, attr, act, self, caller, value=None):
        def __securitycheck__():
            return True
        return __securitycheck__()


# Security model

class EventPlatformNAGSecurityModel(SecurityModel):
    class Role(Enum):
        VISITOR = auto()
        REGULARUSER = auto()
        MODERATOR = auto()
        ADMIN = auto()
        
        def isSubRole(self, obj):
            return (self == self.VISITOR and obj == self.REGULARUSER or 
                    self == self.REGULARUSER and obj == self.MODERATOR or 
                    self == self.REGULARUSER and obj == self.ADMIN or 
                    False)

        def __le__ (self,obj):
            if isinstance(obj,EventPlatformNAGSecurityModel.Role):
                if SecurityModel.closure == {}:
                    SecurityModel.close(EventPlatformNAGSecurityModel.Role)
                return self in SecurityModel.closure and obj in SecurityModel.closure[self]
            else:
                raise ValueError
    
    model = {Role.VISITOR: {'Person': {'moderates': {Action.read: Constraint.fullAccess}}, 'Event': {'title': {Action.read: Constraint.fullAccess}, 'description': {Action.read: Constraint.fullAccess}, 'owner': {Action.read: Constraint.fullAccess}, 'categories': {Action.read: Constraint.fullAccess}}, 'Category': {'name': {Action.read: Constraint.fullAccess}, 'events': {Action.read: Constraint.fullAccess}, 'moderators': {Action.read: Constraint.fullAccess}}, 'Ad': {'content': {Action.read: Constraint.fullAccess}}}, Role.REGULARUSER: {'Person': {'name': {Action.read: Constraint.fullAccess, Action.update: lambda self=None, value=None, caller=None: self == caller}, 'surname': {Action.read: Constraint.fullAccess, Action.update: lambda self=None, value=None, caller=None: self == caller}, 'role': {Action.read: Constraint.fullAccess}, 'gender': {Action.read: lambda self= None, caller= None: self == caller}, 'email': {Action.read: lambda self= None, caller= None: self == caller}, 'events': {Action.read: lambda self= None, caller= None: self == caller, Action.add: lambda caller= None, self= None, value= None: caller == self and value.owner == caller, Action.remove: lambda caller= None, self= None, value= None: caller == self and value.owner == caller}, 'manages': {Action.read: lambda self= None, caller= None: self == caller, Action.add: lambda caller= None, value= None, self= None: caller == value.owner and value.attendants.includes(self) and value.managedBy.excludes(self), Action.remove: lambda caller= None, value= None, self= None: caller == value.owner and self != value.owner and value.managedBy.includes(self)}, 'attends': {Action.read: lambda self= None, caller= None: self == caller, Action.add: lambda self=None, value=None, caller=None: value.managedBy.includes(caller) and value.requesters.includes(value), Action.remove: lambda caller= None, self= None, value= None: (caller == self or value.managedBy.includes(caller)) and value.attendants.includes(self) and value.managedBy.excludes(self)}, 'requests': {Action.read: lambda self= None, caller= None: self == caller, Action.add: lambda caller= None, self= None, value= None: caller == self and value.attendants.excludes(self) and value.requests.excludes(self), Action.remove: lambda caller= None, self= None, value= None: (caller == self or value.managedBy.includes(caller)) and value.requesters.includes(self)}, 'subscriptions': {Action.read: lambda self= None, caller= None: self == caller, Action.add: lambda caller= None, self= None, value= None: caller == self and value.subscribers.excludes(self), Action.remove: lambda caller= None, self= None, value= None: caller == self and value.subscribers.includes(self)}}, 'Event': {'Event': {Action.create: Constraint.fullAccess}, 'attendants': {Action.read: Constraint.fullAccess, Action.remove: lambda caller= None, value= None, self= None: (caller == value or self.managedBy.includes(caller)) and self.attendants.includes(value) and self.managedBy.excludes(value), Action.add: lambda value= None, self= None, caller= None: value == self.owner or (self.managedBy.includes(caller) and self.requesters.includes(value))}, 'managedBy': {Action.read: Constraint.fullAccess, Action.add: lambda caller= None, self= None, value= None: caller == self.owner and (self.attendants.isEmpty() or self.attendants.includes(value)) and self.managedBy.excludes(value), Action.remove: lambda caller= None, self= None, value= None: caller == self.owner and value != self.owner and self.managedBy.includes(value)}, 'owner': {Action.update: lambda self=None, value=None, caller=None: self.owner == None}, 'title': {Action.update: lambda self=None, value=None, caller=None: self.owner == caller or self.managedBy.includes(caller)}, 'description': {Action.update: lambda self=None, value=None, caller=None: self.owner == caller or self.managedBy.includes(caller)}, 'categories': {Action.add: lambda self=None, value=None, caller=None: self.owner == caller or self.managedBy.includes(caller), Action.remove: lambda self=None, value=None, caller=None: self.owner == caller or self.managedBy.includes(caller)}, 'requesters': {Action.add: lambda value= None, caller= None, self= None: value == caller and self.attendants.excludes(caller) and self.requesters.excludes(caller), Action.remove: lambda value= None, caller= None, self= None: (value == caller and self.requesters.includes(caller)) or (self.managedBy.includes(caller) and self.requesters.includes(value)), Action.read: lambda self= None, caller= None: self.managedBy.includes(caller)}}, 'Category': {'subscribers': {Action.add: lambda caller= None, value= None, self= None: caller == value and self.subscribers.excludes(value), Action.remove: lambda caller= None, value= None, self= None: caller == value and self.subscribers.includes(value)}, 'events': {Action.add: lambda self=None, value=None, caller=None: value.managedBy.includes(caller), Action.remove: lambda self=None, value=None, caller=None: value.managedBy.includes(caller)}}}, Role.MODERATOR: {'Person': {'subscriptions': {Action.read: lambda self= None, caller= None: self == caller}, 'moderates': {Action.remove: lambda caller= None, self= None, value= None: caller == self and value.moderators.includes(self)}, 'email': {Action.read: lambda self= None, caller= None: self.subscriptions.select((lambda cate: cate.moderators.includes(caller))).size() > 0}}, 'Event': {'categories': {Action.remove: lambda value= None, caller= None, self= None: value.moderators.includes(caller) and self.categories.includes(value)}}, 'Category': {'subscribers': {Action.read: lambda self= None, caller= None: self.moderators.includes(caller)}, 'moderators': {Action.remove: lambda value= None, caller= None, self= None: value == caller and self.moderators.includes(caller)}, 'events': {Action.remove: lambda self= None, caller= None, value= None: self.moderators.includes(caller) and self.events.includes(value)}}}, Role.ADMIN: {'Person': {'name': {Action.read: Constraint.fullAccess}, 'surname': {Action.read: Constraint.fullAccess}, 'role': {Action.read: Constraint.fullAccess, Action.update: lambda self=None, value=None, caller=None: value != dtm.Role.VISITOR}, 'gender': {Action.read: Constraint.fullAccess}, 'moderates': {Action.add: lambda self=None, value=None, caller=None: value.moderators.excludes(self) and self.role == dtm.Role.MODERATOR, Action.remove: lambda self=None, value=None, caller=None: value.moderators.includes(self)}}, 'Category': {'Category': {Action.create: Constraint.fullAccess, Action.delete: Constraint.fullAccess}, 'name': {Action.update: Constraint.fullAccess}, 'moderators': {Action.add: lambda self=None, value=None, caller=None: self.moderators.excludes(value) and value.role == dtm.Role.MODERATOR, Action.remove: lambda self=None, value=None, caller=None: self.moderators.includes(value)}}, 'Ad': {'Ad': {Action.create: Constraint.fullAccess, Action.delete: Constraint.fullAccess}, 'content': {Action.update: Constraint.fullAccess}}}}
    
EventPlatformNAGSecurityModel.validate()